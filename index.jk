// The entirety of Homotopy Type Theory: Univalent Foundations of Mathematics
// by The Univalent Foundations Program at the Institute for Advanced Study
// written in Jake.

// 1.2: Function types
// A -> B = Hom(A, B)

// 1.2.1
// For Φ: A -> B
// function f(x: A): B {
//     return Φ(x);
// }

// 1.2(a)
// For Φ: A -> B
// let f: A -> B = x |-> Φ(x);

// 1.2(b)
// For g: A -> B -> C
// g(x, -) = y |-> g(x, y)

// 1.2(c)
// For f: A -> B
// f = x |-> f(x)

// 1.2(d)
// For Φ: A -> B
// let f: A -> B = x |-> Φ(x);
// is the same as
// function f(x: A): B = Φ(x);

// 1.2(e)
// For f: A -> B -> C, a: A, b: B
// f(a, b) = f(a)(b)

// 1.2(f)
// For Φ: A -> B -> C
// let f: A -> B -> C = x |-> y |-> Φ(x, y);
// is the same as
// function f(x: A, y: B): C = Φ(x, y);

// 1.3: Universes and families
// *: **: ***: ...
// if A: *(i), then A: *(i + 1)

// 1.3(a)
// B: A -> * 
// function B(x: A): * = /* ... */

// 1.4: Dependent function types (Π-types)
// (x: A) -> B = A -> B

// 1.4.1
// For Φ: x: A -> B(x)
// function f(x: A): B(x) {
//     return Φ(x);
// }

// 1.4(a)
// swap: A: * -> B: * -> C: * -> (A -> B -> C) -> B -> A -> C
function swap<A: *, B: *, C: *>(g: A -> B -> C, b: B, a: A): C {
    return g(a, b);    
}

// or

function swap'<A: *, B: *, C: *>(g: A -> B -> C): B -> A -> C {
    return b |-> a |-> g(a, b);    
}

// One could also write
// function swap<A,B,C: *> ...

// 1.5: Product types
// For A, B: *, there is [A, B]: *

// 1.5(a)
// There is a void type []: *

// 1.5(b)
// For a: A, b: B, there is [a, b]: [A, B]

// 1.5(c)
// There is a term []: []

// 1.5(d)
function pr1<A,B: *>([a, b]: [A, B]): A = a;
function pr2<A,B: *>([a, b]: [A, B]): B = b;

// 1.5.2
function productRec<A,B,C: *>(g: A -> B -> C, [a, b]: [A, B]): C = g(a, b);

// let pr1 = productRec(a |-> b |-> a);
// let pr2 = productRec(a |-> b |-> b);

// 1.5(e)
function voidRec<C: *>(c: C, []): C = c;

// 1.5(f)
function uniq<A,B: *>([a, b]: [A, B]): [pr1(x), pr2(x)] {
    return refl [a, b];
}

// 1.5(g)
// productInd: A: * -> B: * -> ([A, B] -> *) -> (x: A -> y: B -> C([x, y])) -> [A, B] -> C(x);
function productInd<A,B: *>(C: [A, B] -> *, g: x: A -> y: B -> C([x, y]), (x: [a, b]): [A, B]): C(x) {
    return g(a)(b);
}

// 1.5(h)
// voidInd: C: ([] -> *) -> C([]) -> x: [] -> C(x)
function voidInd(C: [] -> *, c: C([]), x: []): C(x) = c;

// 1.6: Dependent pair types (Σ-types)
// [x: A, B] = [A, B]

function pr1<A: *, B: A -> *>([a, b]: [x: A, B(x)]): A = a;
function pr2<A: *, B: A -> *>((p: [a, b]): [x: A, B(x)]): B(pr1(p)) {
    return b;
}

// 1.6(a)
// sigmaInd: A: * -> B: (A -> *) -> C: ([x: A, B(x)] -> *) -> (a: A -> b: B(a) -> C([a, b])) -> p: [x: A, B(x)] -> C(p);
function sigmaInd<A: *, B: A -> *, C: [x: A, B(x)] -> *>(g: a: A -> b: B(a) -> C([a, b]), (p: [a, b]): [x: A, B(x)]): C(p) {
    return g(a)(b);
}

// 1.6(b)
// ac: A: * -> B: * -> R: (A -> B -> *) -> (x: A -> [y: B, R(x, y)]) -> [f: A -> B, x: A -> R(x, f(x))]
function ac<A,B: *, R: A -> B -> *>(g: x: A -> [y: B, R(x, y)]): [f: A -> B, x: A -> R(x, f(x))] {
    return [x |-> pr1(g(x)), x |-> pr2(g(x))];
}

// 1.6(c)
let Magma: * = [A: *, m: A -> A -> A];

// 1.6(d)
let PointedMagma: * = [Magma, e: A];

// 1.7
// For A,B: *, there is (A | B): *
// let never: * = |;

// 1.7(a)
// coproductRec: A: * -> B: * -> C: * -> (A -> C) -> (B -> C) -> A | B -> C
function coproductRec<A,B,C: *>(g0: A -> C, g1: B -> C, a: A): C {
    return g0(a);
}

function coproductRec<A,B,C: *>(g0: A -> C, g1: B -> C, b: B): C {
    return g1(b);
}
